#version 450 core

const float RADIUS = 0.75;

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout(binding = 0, r8) uniform restrict writeonly image2D dst;

layout(std140, binding = 0) uniform CameraBlock {
    mat4 view;
    mat4 viewInv;
    mat4 proj;
    mat4 projInv;
};

layout(std140, binding = 2) uniform SsaoBlock {
    vec4 samples[64];
};

layout(binding = 0) uniform sampler2D gbufferTexture0; // depth
layout(binding = 1) uniform sampler2D gbufferTexture1; // rgb: normal, a: metallic
layout(binding = 2) uniform sampler2D noiseTexture;

vec3 decodePosition(vec2 uv) {
    float z = texture(gbufferTexture0, uv).r * 2.0 - 1.0;
    vec4 projected = vec4(uv.xy * 2.0 - 1.0, z, 1.0);
    vec4 view = projInv * projected;
    view /= view.w;
    return view.xyz;
}

void main() {
    vec2 texcoord = vec2(gl_GlobalInvocationID.xy) / vec2(imageSize(dst));
    vec2 texelRatio = vec2(1.0, float(imageSize(dst).x) / float(imageSize(dst).y));

    vec3 position = decodePosition(texcoord);
    vec3 normal = mat3(view) * normalize(texture(gbufferTexture1, texcoord).xyz * 2.0 - 1.0);

    vec2 noiseScale = vec2(imageSize(dst)) / textureSize(noiseTexture, 0);
    vec3 randomVec = vec3(texture(noiseTexture, texcoord * noiseScale).xy, 0.0);

    vec3 tangent = normalize(randomVec - normal * dot(randomVec, normal));
    vec3 bitangent = cross(normal, tangent);
    mat3 tbn = mat3(tangent, bitangent, normal);

    float occlusion = 0.0;
    for (int i = 0; i < 32; ++i) {
        vec3 sampleDir = tbn * samples[i].xyz;
        vec3 samplePos = position + sampleDir * RADIUS;

        vec4 offset = vec4(samplePos, 1.0);
        offset = proj * offset;
        offset.xyz /= offset.w;
        offset.xyz = offset.xyz * 0.5 + 0.5;

        occlusion += step(texture(gbufferTexture0, offset.xy).r + 0.001, offset.z);
    }

    occlusion = 1.0 - occlusion / 32.0;

    imageStore(dst, ivec2(gl_GlobalInvocationID.xy), vec4(occlusion));
}